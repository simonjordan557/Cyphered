using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading;

namespace Cyphered
{
    
    public class Cypher
    {
        private int encryptCounter;
        private int decryptCounter;
        public string outputDirectory;
        private string outputFile;
        private User authorisedUser;
        private int seed;
        private Random rng;
        private int randomIndex;
        private HashSet<int> alphabetIndex = new HashSet<int>(Enumerable.Range(0, 26));
        private List<char> alphabetList = new List<char>() { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };
        private Dictionary<char, char> encryptMatrix;
        private Dictionary<char, char> decryptMatrix;
        private string userInput;
        private string userOutput;

        public int Seed
        {
            get // Only if user login is validated.
            {
                List<User> authorisedUserAsList = new List<User> { authorisedUser };

                if (authorisedUser.Equals(Helper.GetAndValidateLogin(authorisedUserAsList)))
                {
                    return seed;
                }

                else return -1;
            }
        }
        public Cypher(int key, User user)
        {
            // Create a substitution table, choosing unique alpha characters in a sequence based on a seed generated by the key parameter.
            seed = key;
            authorisedUser = user;
            rng = new Random(key);
            encryptMatrix = new Dictionary<char, char>();
            decryptMatrix = new Dictionary<char, char>();
            outputDirectory = Directory.CreateDirectory(Directory.GetCurrentDirectory() + $"\\sessions\\{DateTime.Now.ToString().Replace("/", "").Replace(" ", "_").Replace(":", "")}").FullName;
            encryptCounter = 0;
            decryptCounter = 0;

            for (char c = 'A'; c <= 'Z'; c++)
            {
                do
                {
                    randomIndex = rng.Next(0, 26);
                }
                while (!alphabetIndex.Contains(randomIndex));

                encryptMatrix.Add(c, alphabetList[randomIndex]);
                alphabetIndex.Remove(randomIndex);
            }

            // Create a mirrored table for decrypting messages previously encrypted with this cypher.
            foreach (KeyValuePair<char, char> entry in encryptMatrix)
            {
                decryptMatrix.Add(entry.Value, entry.Key);
            }
        }

        public override string ToString()
        {
            // Shows the substitution table of the cypher.
            StringBuilder sb = new StringBuilder();
            sb.Append($"CYPHER TABLE FOR KEY {seed}:\n\n");
            foreach (var entry in encryptMatrix)
            {
                sb.Append($"\n{entry.Key} => {entry.Value}");
            }

            return sb.ToString();
        }

        public void EncryptMessageFromConsole()
        {
            Console.Clear();
            Console.WriteLine("Enter message to be encrypted: ");
            userInput = Console.ReadLine().ToUpper().Trim();
            Encrypt();
        }

        public void EncryptMessageFromFile()
        {
            Console.Clear();
            // Get and validate a file from the user.
            Func<string, bool> func = Helper.ValidateFilePathAsTxtFile;
            string message = $"Enter the full path of your .txt file: ";
            string filePath = Helper.PromptForStringInput(message, func);
            
            if (filePath == "" || filePath == null)
            {
                Console.WriteLine("No file supplied.");
                return;
            }

            // Read in data from the file.
            userInput = Helper.ReadFromFile(filePath).ToUpper().Trim();
            Encrypt();
        }

        private void Encrypt()
        {
            StringBuilder sb = new StringBuilder();

            // Convert letters using substitution table.
            foreach (char c in userInput)
            {
                if (char.IsLetter(c))
                {
                    sb.Append(encryptMatrix[c]);
                }

                else sb.Append(c);
            }

            // Output result to a text file, and to console.
            userOutput = sb.ToString();
            outputFile = outputDirectory + $"\\encrypt_{encryptCounter}.txt";
            if (Helper.WriteToFile(outputFile, userOutput))
            {
                Console.WriteLine($"\n{userOutput}");
                Console.WriteLine($"Successfully encrypted message: {outputFile}\n");
                encryptCounter++;
            }

            else
            {
                Console.WriteLine("There was a problem. Please try again.");
                Console.WriteLine("Press ENTER to continue.");
            }
        }

        public void DecryptMessageFromConsole()
        {
            Console.Clear();
            Console.WriteLine("Enter message to be decrypted: ");
            userInput = Console.ReadLine().ToUpper().Trim();
            Decrypt();
        }

        public void DecryptMessageFromFile()
        {
            Console.Clear();
            // Get and validate a file from the user.
            Func<string, bool> func = Helper.ValidateFilePathAsTxtFile;
            string message = $"Enter the full path of your .txt file: ";
            string filePath = Helper.PromptForStringInput(message, func);

            if (filePath == "" || filePath == null)
            {
                Console.WriteLine("No file supplied.");
                return;
            }

            // Read in data from the file.
            userInput = Helper.ReadFromFile(filePath).ToUpper().Trim();
            Decrypt();
        }

        private void Decrypt()
        {
            StringBuilder sb = new StringBuilder();

            // Convert letters using the substitution table.
            foreach (char c in userInput)
            {
                if (char.IsLetter(c))
                {
                    sb.Append(decryptMatrix[c]);
                }

                else sb.Append(c);
            }

            // Output result to text file, and to the console.
            userOutput = sb.ToString();
            outputFile = outputDirectory + $"\\decrypt_{decryptCounter}.txt";
            if (Helper.WriteToFile(outputFile, userOutput))
            {
                Console.WriteLine($"\n{userOutput}");
                Console.WriteLine($"Successfully decrypted message: {outputFile}\n");
                decryptCounter++;
            }

            else
            {
                Console.WriteLine("There was a problem. Please try again.");
                Console.WriteLine("Press ENTER to continue.");
            }
        }
    }
}
